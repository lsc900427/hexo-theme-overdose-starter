<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;= 쉽게 읽히는</title>
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://GITHUB_ID.github.io/"/>
  <updated>2017-08-04T07:46:01.000Z</updated>
  <id>https://GITHUB_ID.github.io/</id>
  
  <author>
    <name>SangCheol Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rest parameter</title>
    <link href="https://GITHUB_ID.github.io/2017/08/04/rest,%20spread/"/>
    <id>https://GITHUB_ID.github.io/2017/08/04/rest, spread/</id>
    <published>2017-08-03T17:34:26.000Z</published>
    <updated>2017-08-04T07:46:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p>
<p>##기본 파라미터 초기값</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  x = x || <span class="number">0</span>;</div><div class="line">  y = y || <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a()); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(plus(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//3</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x= <span class="number">0</span>, y=<span class="number">0</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a());</div><div class="line"><span class="built_in">console</span>.log(a(<span class="number">1</span>,<span class="number">2</span>));</div></pre></td></tr></table></figure>
<h2 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">...rest</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(rest));</div><div class="line"><span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>Rest 파라미터는 반드시 마지막 파라미터여야 한다.</p>
<h3 id="Spread-연산자"><a href="#Spread-연산자" class="headerlink" title="Spread 연산자"></a>Spread 연산자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function">(<span class="params">x, y, z</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">  <span class="built_in">console</span>.log(y);</div><div class="line">  <span class="built_in">console</span>.log(z);</div><div class="line">&#125;</div><div class="line">a(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div></pre></td></tr></table></figure>
<p>spread연산자는 인수에 rest는 파라미터에<br>spread 연산자는 순서 상관없이 사용가능하다.</p>
<p>##배열로 활용하는 법을 알아보자</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 기존 배열을 새로운 배열로 합칠경우</span></div><div class="line"><span class="comment">// ES5 </span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])); <span class="comment">// [1,2,3,4,5,6]</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log([...arr, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div><div class="line"></div><div class="line"><span class="comment">//push</span></div><div class="line"></div><div class="line"><span class="comment">//ES5</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;p&gt;##기본 파라미터 초기값&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="rest parameter,spread, ES6" scheme="https://GITHUB_ID.github.io/tags/rest-parameter-spread-ES6/"/>
    
  </entry>
  
  <entry>
    <title>화살표 함수</title>
    <link href="https://GITHUB_ID.github.io/2017/08/04/arrow_funtion/"/>
    <id>https://GITHUB_ID.github.io/2017/08/04/arrow_funtion/</id>
    <published>2017-08-03T15:57:12.000Z</published>
    <updated>2017-08-04T07:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p>
<h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><hr>
<p>##화살표 함수의 호출<br>화살표 함수는 익명함수로만 사용할 수 있다.<br>따라서 호출하기 위해서는 함수표현식을 사용한다.</p>
<p>콜백함수로도 사용할 수 있다.</p>
<h2 id="arguments와-rest파라미터"><a href="#arguments와-rest파라미터" class="headerlink" title="arguments와 rest파라미터"></a>arguments와 rest파라미터</h2><p>arguments 객체는 유사배열 객체이다<br>함수 객체의 arguments 프로퍼티는 객체를 값으로 가지며 함수 내부에서 지역변수처럼 사용된다.</p>
<p>Es6는 arguments 프로퍼티가 없기 때문에 rest파라미터를 활용하여 가변인자를 함수내부에 배열로 전달 할 수 있다.</p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>function 키워드를 사용하여 생성한 일반 함수와 Arrow function과의 가장 큰 차이점은 this이다</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Prefixer</span>(<span class="params">prefix</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.prefix = prefix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Prefixer.prototype.prefixArray = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="comment">// (A)</span></div><div class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prefix + <span class="string">' '</span> + x; <span class="comment">// (B)</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> pre = <span class="keyword">new</span> Prefixer(<span class="string">'Hi'</span>);</div><div class="line"><span class="built_in">console</span>.log(pre.prefixArray([<span class="string">'Lee'</span>, <span class="string">'Kim'</span>]));</div></pre></td></tr></table></figure>
<p>여기서 this가 생성자 함수의 인스턴스로 기대하였겠지만<br>프로토타입의 처음으로 실행하는 경우의 함수만 인스턴스로 인식이 되고 두번째 부터는 전역함수로 this가 할당이 되기 때문에<br>예상되는 결과가 나오지 않게 된다. 그렇기 때문에 이를 해결하기 위해서<br>4가지 방법이 있다.<br>첫번째는 프로토압의 첫번째 함수에 var that = this; 를대입시켜<br>that.prefix를 만들어주는 방법이다.</p>
<p>두번째는 function(arr){return arr.map(), this}<br>이후 두번째 인자로 this를 잡아주는 방법이다ㅏ</p>
<ul>
<li>이는 map의 두번째 인자의 역할 때문이다.</li>
</ul>
<p>세번째는 bind(this)를 이용하는 것이다.</p>
<ul>
<li>bind 같은 경우는 첫번째 인자가 그 스코프에서의 변수기 때문에 bind(this)를 사용할 경우<br>this가 인스턴스인 this가 this로 들어가게 된다.</li>
</ul>
<p>call이 안되는 이유는 call은 호출을 해버리기에 값이 함수가 아니라는 에러가 뜨게 된다.</p>
<p>네번째는 애로우 함수의 this이다</p>
<ul>
<li>애로우 함수의 this 언제나 자신이 포함된 외부 스코프에서 this를 계승 받는다 즉 this를 생성하지 않고 자신을 포함하는 컨텍스트로부터 this를 계승받는 것이다.</li>
</ul>
<p>이로인해서 쓰이면 안되는 곳이 있다.</p>
<ol>
<li>메소드 안에 함수를사용하면 외부의 디스를 가져와서 전역 객체에 바인딩 된다.<br>축약형 표현을 사용해라 () {}</li>
<li>prototype에 할당하는 경우도 동일한 문제가 발생한다.<br>왜냐면 프로토 타입에도 처음 익명함수는 그 객체이기 때문이다.</li>
<li>생성자함수는 아예 존재하지 않는다. 그러므로애로우 함수는 생성자 함수로 사용 불가능하다. 프로토타입 프로퍼티가 존재하지 않기 때문이다.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Syntax&quot;&gt;&lt;a href=&quot;#Syntax&quot; class=&quot;headerlink&quot; title=&quot;Syntax&quot;&gt;&lt;/a&gt;Syntax&lt;/h1&gt;
    
    </summary>
    
    
      <category term="ES6, ES2015, Arrow function, this, scope" scheme="https://GITHUB_ID.github.io/tags/ES6-ES2015-Arrow-function-this-scope/"/>
    
  </entry>
  
  <entry>
    <title>ES6 템플릿 리터럴</title>
    <link href="https://GITHUB_ID.github.io/2017/08/04/template_literal/"/>
    <id>https://GITHUB_ID.github.io/2017/08/04/template_literal/</id>
    <published>2017-08-03T15:34:47.000Z</published>
    <updated>2017-08-04T07:45:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"><br>ES6는 템플릿 리터럴이라 불리는 새로운 문자열 표기법을 도입했다.<br>공백을 표현하기 위해서는 이스케이프 시퀀스를 사용해야한다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> strings =</div><div class="line"><span class="string">`&lt;li&gt;밥&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;li&gt;반찬&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;li&gt;고기&lt;/li&gt;`</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(strings)</div></pre></td></tr></table></figure>
<p>문자열 삽입, 표현식에 새로운 방식을 도입했다.<br><code>${문자열}</code>, <code>${자바스크립트 표현}</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> first = <span class="string">'이'</span>;</div><div class="line"><span class="keyword">const</span> last = <span class="string">'지'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'정말'</span> + first + last);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`정말<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;last&#125;</span>`</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;first === <span class="string">'이'</span>&#125;</span>`</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;br&gt;ES6는 템플릿 리터럴이라 불리는 새로운 문자열 표기법을 도입했다.&lt;br&gt;공백을 표현하기 위해서는 이스케이프 시퀀스를 사용해야한다.&lt;/p&gt;
&lt;figur
    
    </summary>
    
    
      <category term="ES2015, ES6, template-literal" scheme="https://GITHUB_ID.github.io/tags/ES2015-ES6-template-literal/"/>
    
  </entry>
  
  <entry>
    <title>Es6 let,const</title>
    <link href="https://GITHUB_ID.github.io/2017/08/03/let-const/"/>
    <id>https://GITHUB_ID.github.io/2017/08/03/let-const/</id>
    <published>2017-08-03T14:08:41.000Z</published>
    <updated>2017-08-03T15:31:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5에서-변수-선언의-유일한-방법-gt-var-키워드"><a href="#ES5에서-변수-선언의-유일한-방법-gt-var-키워드" class="headerlink" title="ES5에서 변수 선언의 유일한 방법 =&gt; var 키워드"></a>ES5에서 변수 선언의 유일한 방법 =&gt; var 키워드</h2><p><code>var 키워드의 특징</code></p>
<p>Function-level scope</p>
<ul>
<li>전역 변수의 남용 문제</li>
<li>for문에서 사용한 변수의 전역 참조 문제<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">var</span> a = <span class="number">2</span>; </div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>var 키워드 생략 가능</p>
<ul>
<li>의도하지 않은 변수의 전역화</li>
</ul>
<p>변수 호이스팅</p>
<ul>
<li>인터프리터가 변수를 읽기 전에 undefined값이 할당되는 문제 발생</li>
</ul>
<p>전역변수가 사용이 편리한 면이 있지만 scope가 넓어서 협업시 변수의 중복 문제 및 재할당문제가 발생 될 수 있다.<br>Es6는 이런 단점을 보완하기 위해서 let, const 키워드를 도입</p>
<h2 id="ES6에서의-변수-let"><a href="#ES6에서의-변수-let" class="headerlink" title="ES6에서의 변수 let"></a>ES6에서의 변수 let</h2><p><code>let의 특징</code></p>
<p>Block-level scope</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">let</span> a = <span class="number">2</span>; </div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div></pre></td></tr></table></figure>
<p>중복 선언 금지<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="number">8</span>; <span class="comment">// 가능</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">12</span>; <span class="comment">// 오류발생</span></div></pre></td></tr></table></figure></p>
<p>호이스팅</p>
<ul>
<li>자바스크립트는 let, const 포함 모든 선언을 호이스팅한다. var와 let의 차이점은<br>선언문 전에 참조할 경우 undefined가 아닌 Error가 발생한다. TDZ(일시적 사각지대) 때문이다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="number">1</span>; <span class="comment">//의미없</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferneceError</span></div><div class="line"><span class="keyword">let</span> bar;</div></pre></td></tr></table></figure>
<p>이 차이점은 어디서 올까?<br>var로 선언한다면 변수를 선언하고 선언한 변수를 메모리에 넣는<br>초기화 행위(이때 undefined)가 한번에 이뤄진다. 일단 초기화를 하고 변수를 읽는다고 보면 된다.<br>let은 변수가 선언은 되지만 메모리에 넣는 행위(초기화)가<br>변수를 읽는 시점에 이뤄지기 때문에 에러가 발생한다.<br>즉 ReferenceError가 발생하는 이유는 초기화(undefined 할당)가 되지 않고<br>변수만 선언한 시점에서 변수를 불러오기 때문에 에러가 뜨는 것이라고 볼 수 있다.<br>에러가 뜨는 변수등록부터 초기화 될 때까지를 TDZ라 부른다.</p>
<p>전역변수</p>
<ul>
<li>var는 단순하게 전역에 변수를 때려넣으면 전역 객체의 프로퍼티가 되지만<br>let같은 경우는 전역 변수로 사용해도 전역 객체의 프로퍼티가 아니다.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">consolelog(<span class="built_in">window</span>.a); <span class="comment">//1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<p><code>const키워드의 특징</code><br>const는 변하지 않는 값(상수)의 역할을 수행한다.<br>const를 객체의 선언에 사용하면 좋다.</p>
<p>선언과 초기화</p>
<ul>
<li>let은 초기화 이후 다른 값으로 재할당 가능하나 const는 초기화 이후 재할당이 불가능하다.</li>
<li>또한 선언만 할수 없다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line">a = <span class="number">2</span>; <span class="comment">// Error</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> c; <span class="comment">//Error</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>의미있는 변수는 상수화하자(대문자)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</div><div class="line">  </div><div class="line">&#125; <span class="comment">// 지양</span></div><div class="line"><span class="keyword">const</span> MIN_NUMBER = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (a &gt; MIN_NUMBER) &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>const는 객체타입에 사용하자<br>let은 primirive형 변수에 사용하자<br>ES6는 var를 사용하지말자.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES5에서-변수-선언의-유일한-방법-gt-var-키워드&quot;&gt;&lt;a href=&quot;#ES5에서-변수-선언의-유일한-방법-gt-var-키워드&quot; class=&quot;headerlink&quot; title=&quot;ES5에서 변수 선언의 유일한 방법 =&amp;gt; var 키워
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="https://GITHUB_ID.github.io/2017/08/03/Webpack/"/>
    <id>https://GITHUB_ID.github.io/2017/08/03/Webpack/</id>
    <published>2017-08-02T19:42:49.000Z</published>
    <updated>2017-08-03T12:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Webpack</a>는 자바스크립트를 위한 모듈 번들러입니다.<br><img src="../../../../images/webpack.png" alt="html"><br>많이 쓰이지만 처음 접하면 굉장히 복잡한 도구 중 하나라고 생각합니다.<br>이런 복잡함을 해소하기 위해서 보통 스타터킷으로 많이 시작하곤 하죠.<br>그렇기에 설정들이 무엇을 의미하는지 알기가 쉽지 않습니다.<br>우리는 간단하게 webpack의 설정들이 무엇인지 알아보는 시간을 갖도록 하겠습니다.!!</p>
<h2 id="Webpack-설정"><a href="#Webpack-설정" class="headerlink" title="Webpack 설정"></a>Webpack 설정</h2><h3 id="1단계"><a href="#1단계" class="headerlink" title="1단계"></a>1단계</h3><p><code>webpack.config.js</code>파일을 생성합니다.(폴더 생성하셔서 이런 이름의 파일을 만드시면 됩니다)</p>
<p><code>path</code>를 로드합니다.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div></pre></td></tr></table></figure>
<p><code>path</code>의 역할은 경로를 설정해주는 의존 모듈</p>
<h3 id="2단계"><a href="#2단계" class="headerlink" title="2단계"></a>2단계</h3><p><code>webpack</code> 설정 모듈을 정의합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.export = &#123;</div><div class="line">    entry: <span class="string">'./test2.js'</span>,                 </div><div class="line">    output: &#123;                           </div><div class="line">      path: __dirname,                     </div><div class="line">      filename: <span class="string">'bundle.js'</span>,               </div><div class="line">      publicPath: <span class="string">'http://user-server-domain.com/'</span></div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>이제 <code>entry</code>와 <code>output</code>이 무엇인지 알아봅시다.</p>
<ul>
<li><code>entry</code>: 진입 파일의 경로를 설정</li>
<li><code>output</code>: 출력 파일의 경로를 설정<ul>
<li><code>path</code>: 출력 파일의 폴더를 설정 (절대 경로) / __dirname은 현재 자신의 경로입니다.</li>
<li><code>filename</code>: 출력 파일의 이름 설정</li>
<li><code>publicPath</code>: 배포시 HTML, CSS 파일 내부의 경로 업데이트를 하기 위한 설정<h5 id="publicPath-HTML-CSS-파일에-경로가-설정되어-있는데-로컬-테스트-환경에서는-로드할-수-있는-URL이-있을-수-있으나-배포시에는-적용이-안되어-일일이-수정해야하는-경우가-있는데그런경우에-사용합니다"><a href="#publicPath-HTML-CSS-파일에-경로가-설정되어-있는데-로컬-테스트-환경에서는-로드할-수-있는-URL이-있을-수-있으나-배포시에는-적용이-안되어-일일이-수정해야하는-경우가-있는데그런경우에-사용합니다" class="headerlink" title="publicPath: HTML, CSS 파일에 경로가 설정되어 있는데 로컬 테스트 환경에서는 로드할 수 있는 URL이 있을 수 있으나 배포시에는 적용이 안되어 일일이 수정해야하는 경우가 있는데그런경우에 사용합니다."></a><code>publicPath</code>: HTML, CSS 파일에 경로가 설정되어 있는데 로컬 테스트 환경에서는 로드할 수 있는 URL이 있을 수 있으나 배포시에는 적용이 안되어 일일이 수정해야하는 경우가 있는데그런경우에 사용합니다.</h5></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,                </div><div class="line">        exclude: [ <span class="regexp">/node_modules/</span> ],  <span class="comment">// 제외할 경로</span></div><div class="line">        include: [ <span class="regexp">/src/</span> ],           <span class="comment">// 포함할 경로</span></div><div class="line">        loader: <span class="string">'babel-loader'</span>        </div><div class="line">    &#125;]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<ul>
<li><code>module</code>: webpack의 모듈을 설정<ul>
<li><code>rules</code>: 다양한 모듈이 있기에 모듈별로 정의해주기 위한 설정<ul>
<li><code>test</code>: 파일 경로를 정규표현식으로 설정</li>
<li><code>excluee</code>: 제외할 경로(loader가 안 읽을 것들을 제외)</li>
<li><code>include</code>: 포함할 경로(loader가 읽을 것들을 포함)</li>
<li><code>loader</code>: 번들링에 사용되는 모듈을 설정 (css, js, image, babel등 다양한 타입)</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">devtool: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line">resolve: &#123;</div><div class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li><code>devtool</code>: 번들된 파일에서 오류검출이 아니라 각각의 파일에서 오류를 검출 설정가능(다양한 설정 존)</li>
<li><code>extensions</code>: 파일 확장자 설정</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plugins: [],</div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    compress: <span class="literal">true</span>,</div><div class="line">    port: <span class="number">9000</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>plugins</code>: 결과물인 bundle에 작동하는 추가 node_modules</p>
<ul>
<li><code>dev-server</code>: 자신이 설정한 포트로 실행되는 개발 서버입니다.<br>서버는 내부적으로 webpack을 호출하며 실시간로딩 및 각종 추가적인 기능을 활용할 수 있습니.<ul>
<li><code>contentBase</code>: devServer의 루트 경로를 설정합니다.</li>
</ul>
</li>
</ul>
<h3 id="3단계"><a href="#3단계" class="headerlink" title="3단계"></a>3단계</h3><p>이제 웹팩 설정 파일을 보며 복습해 봅시다!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: path.resolve(<span class="string">'src/index.jsx'</span>),</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(<span class="string">'dist'</span>),</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      loader: <span class="string">'eslint-loader'</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      enforce: <span class="string">'pre'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'babel-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.hbs$/</span>,</div><div class="line">      loader: <span class="string">'handlebars-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      loader: <span class="string">'style-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      loader: <span class="string">'css-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.(png|jpg|gif|ttf|eot|woff|woff2|svg)$/</span>,</div><div class="line">      loader: <span class="string">'url-loader'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  plugins: [],</div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    compress: <span class="literal">true</span>,</div><div class="line">    port: <span class="number">9000</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Webpack&lt;/a&gt;는 자바스크립트를 위한 모듈 번들러입니다.&lt;br&gt;&lt;img 
    
    </summary>
    
    
      <category term="webpack" scheme="https://GITHUB_ID.github.io/tags/webpack/"/>
    
      <category term="v2" scheme="https://GITHUB_ID.github.io/tags/v2/"/>
    
      <category term="bundler" scheme="https://GITHUB_ID.github.io/tags/bundler/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://GITHUB_ID.github.io/2017/07/31/hello-world/"/>
    <id>https://GITHUB_ID.github.io/2017/07/31/hello-world/</id>
    <published>2017-07-30T17:09:07.000Z</published>
    <updated>2017-07-30T17:09:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a><br><a href="/">Test Link</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
    
    </summary>
    
    
  </entry>
  
</feed>
