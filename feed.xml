<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>&lt;= 쉽게 읽히는</title>
  
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://lsc900427.github.io/"/>
  <updated>2017-10-01T03:49:03.000Z</updated>
  <id>https://lsc900427.github.io/</id>
  
  <author>
    <name>SangCheol Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git-02</title>
    <link href="https://lsc900427.github.io/2017/10/01/git-02/"/>
    <id>https://lsc900427.github.io/2017/10/01/git-02/</id>
    <published>2017-10-01T03:49:03.000Z</published>
    <updated>2017-10-01T03:49:03.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git-01</title>
    <link href="https://lsc900427.github.io/2017/09/23/git-01/"/>
    <id>https://lsc900427.github.io/2017/09/23/git-01/</id>
    <published>2017-09-23T01:18:52.000Z</published>
    <updated>2017-09-23T03:45:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="버전관리가-무엇인가"><a href="#버전관리가-무엇인가" class="headerlink" title="버전관리가 무엇인가?"></a>버전관리가 무엇인가?</h2><ul><li>파일변화를 시간에 따라 기록했다가 이후에 특정 시점의 버전을 로드할 수 있는시스템</li><li>작업자들의 기록이 한 로그에 기록이 된다</li><li>효율적으로 로그를 관리하고 싶을때 버전관리를 사용한다.</li></ul><h2 id="왜-대세인가-대세의-이유"><a href="#왜-대세인가-대세의-이유" class="headerlink" title="왜 대세인가? 대세의 이유"></a>왜 대세인가? 대세의 이유</h2><ul><li>오픈소스다</li><li>공개 프로젝트는 항상무료다.</li><li>비공개는 돈을 내야한다.</li><li>효율적으로 개발자와 개발자가 소통할 수 있다.</li><li>통째로 저장소에 저장 할 수 있다.<br>  fork란 기능을 통해서 독립된 공간에서 작업을 하고 개선할 수 있다.<br>  그리고 제안도 할 수 있다.(포크를 받아서 복사를 한 후에 Pull request라는 기능을 통해서 제안을 할 수가 있다.<br>  )</li><li>branch를 이용한 local에서의 자유로운 실험이 가능하다.</li><li>변동사항이 없으면 깃은파일을 저장하지 않고<br>이전상태 파일에 대한 링크만 저장한다.</li><li>커밋은 작업자 내용 시간 내용등을 전부 저장한다.</li></ul><ul><li>git –version</li><li>which git</li><li>전역과 지역의 차이</li><li>git config –global user.name <name></name></li><li>글로벌 옵션명령어만 빼면 지역에서 할 수 가 있다.</li><li><p>git init을 한 후에 해야 한다.</p></li><li><p>git init이란??</p></li><li>로컬에서 저장소를 만든다.</li></ul><ul><li>로컬에서 만든 것과 원격으로 만든 것은 다르다.</li><li>로컬에서 저장소를 만들면 내 로컬에서만 만든거지 깃허브 페이지랑 연결된 것이 없다.</li><li>깃랩같은 것은 설치형 저장소(비공개 저장소나 사내용으로 사용하기 위한 기업용으로 많이 쓴다.)</li><li>기업용 깃랩은 무료다. 그러나 깃허브 상업적 사용은 비싸다.</li><li>웹에서 만들 수 도있다. 원격저장소로 만들기.</li><li><p>git init으로 만들기.<br>저장소와 연결을 해줘야하기 때문에 번거롭다</p></li><li><p>On branch master<br>Your branch is based on ‘origin/master’, but the upstream is gone.<br>  (use “git branch –unset-upstream” to fixup)<br>nothing to commit, working tree clean<br>unmodified</p><ul><li>수정되면 unmodified가 된다<br>ㅡ 언트랙드</li><li><p>statge area에 올려야한다 깃은!!!</p></li><li><p>깃의 명령어</p></li><li>git status를 치는 습관이 필요하다 파일이 어떤 상태인지 꼭 알아야함</li><li>현재저상소의 변동이 있는지 없는지 확인할 수 있는 명령어다.</li><li><p>축약해서도 볼수 있다.. git status -s</p></li><li><p>staging area 있는 이유</p><ul><li>내가 원하는 것만 커밋을 하고 싶을때 staging area를 통해서 !</li><li>개발 스테이징 개발 베포 리얼배포</li><li>충돌을 해결하고 싶을 때 </li></ul></li></ul></li><li><p>master, 해시로그, 7글자 메세지</p></li><li>커밋생성 로그 이거고 메세지는 이거다.</li><li>4개의 파일변한거 확인가능 create mode 신규로 추가되었다.</li><li>깃이 돌아가는 과정을 상세히 볼 수 가 있다. </li></ul><p>[master 0d76dc0] hello<br> 4 files changed, 188 insertions(+)<br> create mode 100644 2.html<br> create mode 100644 3.html<br> create mode 100644 4.html<br> create mode 100644 5.html</p><p> git commit 이후에 메세지 위에 메세지를 입력해서 킬수도 있다.</p><ul><li>유의미한 커밋메시지를 작성하도록 해라.</li><li>커밋을 하면 로그가 생긴다.</li><li>로그관리를 어떻게 하는지 알아야한다.</li><li>로그보는 것은 중요하다.</li><li>git log</li><li>git log –oneline<ul><li>해시를 7글자로 줄여주고 커밋메세지만 보여준다.</li><li>만약 END가 나오면 Q로 빠져나온다.</li></ul></li></ul><ul><li>git log –graph -2</li></ul><p>iTerm2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;버전관리가-무엇인가&quot;&gt;&lt;a href=&quot;#버전관리가-무엇인가&quot; class=&quot;headerlink&quot; title=&quot;버전관리가 무엇인가?&quot;&gt;&lt;/a&gt;버전관리가 무엇인가?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;파일변화를 시간에 따라 기록했다가 이후에 특정 시점의 
      
    
    </summary>
    
    
      <category term="git스터디" scheme="https://lsc900427.github.io/tags/git%EC%8A%A4%ED%84%B0%EB%94%94/"/>
    
  </entry>
  
  <entry>
    <title>Context</title>
    <link href="https://lsc900427.github.io/2017/09/18/Context/"/>
    <id>https://lsc900427.github.io/2017/09/18/Context/</id>
    <published>2017-09-17T23:26:44.000Z</published>
    <updated>2017-09-17T23:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>##실해컨텍스트란?</p><ul><li>실행 가능한 코드 블럭이 실행되는 환경</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##실해컨텍스트란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 가능한 코드 블럭이 실행되는 환경&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css-rendering3</title>
    <link href="https://lsc900427.github.io/2017/09/14/css-rendering3/"/>
    <id>https://lsc900427.github.io/2017/09/14/css-rendering3/</id>
    <published>2017-09-14T11:26:32.000Z</published>
    <updated>2017-09-14T11:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css는-어떤-식으로-메모리상에-존재하는가"><a href="#css는-어떤-식으로-메모리상에-존재하는가" class="headerlink" title="css는 어떤 식으로 메모리상에 존재하는가"></a>css는 어떤 식으로 메모리상에 존재하는가</h2><pre><code>- 선택자 잡아서 자바스크립트처럼 하는 것은 부하를 별로 주지 않는다</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;css는-어떤-식으로-메모리상에-존재하는가&quot;&gt;&lt;a href=&quot;#css는-어떤-식으로-메모리상에-존재하는가&quot; class=&quot;headerlink&quot; title=&quot;css는 어떤 식으로 메모리상에 존재하는가&quot;&gt;&lt;/a&gt;css는 어떤 식으로 메모리상에
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css-rendersing2</title>
    <link href="https://lsc900427.github.io/2017/09/07/css-rendersing2/"/>
    <id>https://lsc900427.github.io/2017/09/07/css-rendersing2/</id>
    <published>2017-09-07T11:02:30.000Z</published>
    <updated>2017-09-07T12:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="박스모델"><a href="#박스모델" class="headerlink" title="박스모델"></a>박스모델</h3><ul><li>css 레이아웃 규격을 지켜야한다<ul><li>margin은 투명하다 그러나 실체는 있다</li><li>border는 외곽선(끝없는 크기를 가질 수 있다.)</li><li>padding도 투명한다( 보더와 컨텐츠 박스를 띄워주는 역할 )</li></ul></li><li>하나의 엘리먼트는 4단계의 단계를 가지고 있다<ul><li>width 100은 무엇이 100인거야?</li><li>ms는 보더박스를 기준으로.. 그러나 ie는 컨텐츠박스</li><li>box -sizing 보더박스, 패딩박스, 컨텐츠박스 중 하나를 선택하자</li></ul></li><li><p>지금까지 고정 박스 모델</p><ul><li>확장된 css모듈은 그림에는 영향을 미치지 않지만 더 많은 효과를 줄 수 있는 효과들을 만들었다.<ul><li>Box-shadow -&gt; 무한히 만들 수 있다.</li><li>Box-shadow inset</li><li>OUTLINE -&gt; 박스쉐도우 위에 올릴 수 있다.</li></ul></li></ul></li><li><p>Boxshaodw</p><ul><li>노말 플로우 상에서 박스 쉐도우가 뒤에 나온 애가 이긴다.</li><li>노말 플로우 상태에서 rp를 사요하면 이기게된다.</li><li>부하를 주지 않는다. 지오메트리를 건드리지 않고 gpu로 칠하기 때문이다.</li><li>그러기에 앞으로 gpu가 칠해지는 것이 빠르기 때문에 잘 배워 써버리자.</li></ul></li><li><p>지시 엘리먼트</p><ul><li>@를 이용한 지시자 엘리먼트<ul><li>키프레임 @폰트페이스</li><li>드레프트 규격은 머냐</li><li>원래 css에 없는 거지만 이제부터 이 규약을 쓰겠다 그것이 바로 지시자 엘리먼트다.</li><li>변화를 키프레임이라고 한다. 키프레임이 여러개 있어서 키프레임스다.</li><li>셀렉터는 각각 디렉티브내에서 다르게 작동한다. 디렉티브 별로 셀렉터가 다르게 나올 것이다.</li><li>from하고 to라는 셀렉터를 이용해서 박스 쉐도우애니메이션 속성</li></ul></li></ul></li><li><p>Position</p><ul><li>fixed</li><li>caret position &amp; offset</li><li><p>offset이란</p><ul><li><p>정확히 어떤 기준이 있는데 그 기준으로 부터 얼만큼 차이가 나는가?<br>  기준을 알아야한다. 기준으로부터 상대적으로 얼만큼 떨어지냐.<br>  왜 쓰냐 ? 분할하고 사용자가 부분적으로 이해하기 위해서 사용한다.<br>  컨테이너에서 10만큼 떨어져있다. 즉 기준점을 향해서 얼만큼 떨어져 있냐?<br>  절대적 기준이 아니라 기준으로 부터 얼만큼 쓰겠다는 걸 계산하겠다.<br>  돔구조를 따르지 않고 노말 플ㄹ로우의 구조를 따라간다.<br>  오프셋을 계산하는 방법은 오프셋 부모를 얻는 방법에 달려있다.<br>  오프셋 부모 결정 법은?</p><ul><li>NULL<ul><li>ROOT, HTML, BODY</li><li>POSITION: FIXED</li><li>OUT OF DOM TREE</li><li>NULL이 되면 전멸</li></ul></li><li><p>RECURSIVE SEARCH</p><ul><li>PARENT.POSITION:FIXED = NULL</li><li>PARENT.POSITION: !STATIC = OK</li><li>BODY = OK</li><li>TD, TH TABLE = OK<br>  DISPLAY 속성이 아니라 태그가 나와야한다.</li><li>PARENT.PARENT CONTINUE</li><li>오프셋 부모를 얻으면 계산할 수 있다.</li></ul></li><li><p>offsetLeft</p></li><li>offsetTop<br>css가 다 그림을 그리면 엘리먼트에 다 박아준다 오프셋정보들을 우리가 하는게 아니라 css렌더링 엔진이 해준다<br>그렇기 때문에 offset 값을 바꿔도 안변한다 css렌더링 결과를 보여주고 있는 중일 뿐이다.<br>리플로우를 모아서 한다 한프레임당의 변화를 모아서 한다<br>한번할때마다가 아니라 묶어서 계산하는 것이다 한번에 변화를 묵어서<br>그러나 코드 중간에 offset이 나오면 모으지 않고 그 순간 바로 리플로우를한다.<br>offset 값을 쓰면 무조건 리플로우를 한다. 그렇기에 오프셋은 쓰지말고 오프셋쓸꺼면 전부 모아놔라</li></ul></li></ul></li><li><p>absolute</p><ul><li>숫자를 안주면 기본값은 오프셋부모의 탑을 준다.</li><li>left를 주면 부모에 맞춰진다</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;박스모델&quot;&gt;&lt;a href=&quot;#박스모델&quot; class=&quot;headerlink&quot; title=&quot;박스모델&quot;&gt;&lt;/a&gt;박스모델&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;css 레이아웃 규격을 지켜야한다&lt;ul&gt;
&lt;li&gt;margin은 투명하다 그러나 실체는 있다&lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css-Rendering</title>
    <link href="https://lsc900427.github.io/2017/08/31/css-rendering1/"/>
    <id>https://lsc900427.github.io/2017/08/31/css-rendering1/</id>
    <published>2017-08-31T11:30:46.000Z</published>
    <updated>2017-08-31T12:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="영역-나누기-GeoMetry-Calculate"><a href="#영역-나누기-GeoMetry-Calculate" class="headerlink" title="영역 나누기(GeoMetry Calculate)"></a>영역 나누기(GeoMetry Calculate)</h3><ul><li>현대의 렌더링은 geometry를 계산하고 Fragement를 한다</li><li>Geometry를 계산하는 과정을 reflow라 한다</li><li>width ,height, position<h3 id="칠하기-Fragment-Fill"><a href="#칠하기-Fragment-Fill" class="headerlink" title="칠하기(Fragment Fill)"></a>칠하기(Fragment Fill)</h3></li><li>fragement는 픽셀</li><li>Fragment를 칠하는 과정을 repaint라 한다</li><li>background</li></ul><p>현대의 시스템은 영역을 나누고 색을 칠하는 것이 기본이다<br>부하는 fragment fill에서 많이 받는 것 같지만<br>reflow의 변화가 일어나면 전부 다시그려야해서 부하를 더 많이 받는다.<br>geomery쪽 표현을 이해하는 것이 더 어렵다<br>색칠하는 쪽은 위에 비해 국소적인 표현이기 때문에 더 쉽다</p><h3 id="CSS-specifications"><a href="#CSS-specifications" class="headerlink" title="CSS specifications"></a>CSS specifications</h3><h2 id="본질은-약속이다"><a href="#본질은-약속이다" class="headerlink" title="본질은 약속이다"></a>본질은 약속이다</h2><p>~~ 하면 ~~ 해줘.<br>과거에는 W3c 현재는 HTML재단에서</p><ul><li>CSS LEVEL1<ul><li>A4용지 한장 짜리 분량</li></ul></li><li><p>CSS LEVEL2 + MODULE</p><ul><li>통합레벨, 표현과 내용을 분리하자, CSS의 활성화</li><li>CSS 모듈을 쪼개서 관리할래</li></ul></li><li><p>CSS LEVEL 2.1</p><ul><li>통합레벨이 있다.</li><li>모듈들의 통합이라 거의레벨 3이라고 볼수 있다</li></ul></li><li>Module level<ul><li>레벨은 사라졌다</li><li>모듈이 계속 제안되고 있다.</li><li>새 모듈 태반이 초안이다</li><li>CSS 3 는 존재하지않는다. 2.1에서 튀어나온 것이다.<br>  즉 모듈들이 개별적으로 발전하는 것이다.(너무 많은 모듈들이 중구난방으로 발전)</li></ul></li></ul><h2 id="NORMAL-FLOW"><a href="#NORMAL-FLOW" class="headerlink" title="NORMAL FLOW"></a>NORMAL FLOW</h2><ul><li>공부는 정확한 용어를 정확하게 설명</li><li>왜그런지 말을 못하면 구현도 못한다(스펙 문서가 중요하다)</li></ul><p>-NORMAL FLOW가 핵심이다. 이걸 이해 못하면 HTML을 모른다.</p><p>-POSITION</p><ul><li>static</li><li>relative</li><li>위의 두가지만 노말플로우의 영향을 받음</li><li>Block Formatiing Context, inline Formatting Context, relative Position<ul><li>BFC, IFC, RP</li><li>노말 플로우의 핵심</li><li>BFC가 오프셋의 값을 계산해준다.</li><li>인라인 요소를 만나면 인라인 블락을 만든다</li><li>새로운 BFC를만드는 알고리즘 또한있다</li><li>많은 BFC가 모여서 그려진다.</li><li>word-breaking을 걸어두면 글자하나하나를 span처럼 계산하는 구나</li><li>ifc의 알고리즘을 변경해준다.</li><li>BFC, IFC가 중요하지 돔이 중욯지 않다</li><li>RP<ul><li>static으로 그리고나서 스태틱으로 그려진 위치에서 상대적으로 얼마 줄거냐 라는 것을 나타낸다</li><li>노말 플로를 계산하고 relative를 얼마를 주겠다라는 뜻이다.</li></ul></li><li>Float<ul><li>left, right, none, inherit</li><li>css reset 속성은 속성별로 따로 외워야한다(다양한 모듈 때문에)</li><li>NEW BFC -&gt; Float over Normal flow -&gt; Text, Inline Guard(ifc 요소의 가이드 ifc요소들이 float 요소의 자리에 못들어간다.) -&gt; Linebox(float은 line box의 개념으로 그려지게된다, ifc,bfc nomral flow로 그려지지 않는다.)</li><li>인라인 가드가 플로트 가드에 걸리면 부모의 크기를 확장시키지 않는다. 블락가드에걸리면 부모의 크기를 확장시킨다</li><li>플롯 가드에 걸리면 뒤를 안보고 내려버린다.</li><li>레프트 플롯가드보다 왼쪽 라이트 플롯가드보다 오른쪽에 있어야 한다.</li></ul></li><li>Overflow<ul><li>VISIBLE, HIDDEN, SCROLL, INHERIT, AUTO</li><li>VISIBLE이 아닌 경우에  노말 플로우에 영향을 끼친다.</li><li>다른 걸 쓰면 NEW BFC를 만든다.</li><li>기본 값은 VISIBLE 자동으로 공간이 확장된다.<ul><li>BFC, IFC와 동일한 알고리즘을 가지는 것이라고 볼 수 있다.</li></ul></li></ul></li><li>OverFLOW -X, -Y<ul><li>VISIBLE, HIDDEN, SCROLL, CLIP, AUTO</li><li>판단하는 모듈이 다른 css 모듈에 의존해야 한다</li></ul></li><li>TEXT-OVERFLOW<ul><li>2.1 ui module 표준안</li><li>CLIP, ELLIPSIS(…해주게하는거)</li></ul></li></ul></li></ul><pre><code>- absolute- fixed- inherit</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;영역-나누기-GeoMetry-Calculate&quot;&gt;&lt;a href=&quot;#영역-나누기-GeoMetry-Calculate&quot; class=&quot;headerlink&quot; title=&quot;영역 나누기(GeoMetry Calculate)&quot;&gt;&lt;/a&gt;영역 나누기(Geo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Css-inheritance</title>
    <link href="https://lsc900427.github.io/2017/08/07/Css-inheritance/"/>
    <id>https://lsc900427.github.io/2017/08/07/Css-inheritance/</id>
    <published>2017-08-06T20:19:04.000Z</published>
    <updated>2017-08-06T20:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><p>상속이란 상위 요소에 적용된 속성을 하위 요소가 물려받는 것을 의미한다<br>상속 기능이 없다면 각 요소의 rule set에 속성을 매번 각각 지정해야한다.<br>하지만 모든 속성이 상속되는 것이 아니다 상속이 되는 것과 되지 않는 것이 있다.</p><p>안되는 것들<br>width, height, margin, padding, border, box-sizeing<br>display, background, vertical-align, text-decoration, position, top/right/bottom/left<br>, z-index, overflow, float</p><p>되는 것들</p><p>visibility, opacity, font, color, line-height, text-align, white-space</p><p>또한 요소에 따라 상속받지 않는 경우도 존재한다.</p><p>이경우는 inherit 키워드를 사용하여 명시적으로 상속받게 할 수 있다.</p><h2 id="캐스캐이딩"><a href="#캐스캐이딩" class="headerlink" title="캐스캐이딩"></a>캐스캐이딩</h2><p>요소는 하나 이상의 CSS선언에 영향을 받을 수 있따.<br>이 때 충돌을 피하기 위해서 CSS 적용 우선순위가 필요한데 이를 캐스캐이딩이라고 한다.</p><ul><li>중요도<br>어디에 선언되었냐에 따라 우선순위가 달라진다</li><li>명시도<br>대상을 명화갛게 특정할수록</li><li>선언 순서<br>나중에 선언된 스타일이 우선 적용된다.</li></ul><p>CSS가 어디에 선언 되었는지에 따라서 우선순위가 달라진다.</p><ol><li>head 요소 내의 style 요소</li><li>head 요소 내의 style 요소 내의 @import문</li><li>link로 연결된 CSS파일</li><li>link로 연결된 CSS파일 내의 @import문</li><li>브라우저 디폴트 스타일 시트</li></ol><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><ul><li>transition: property duration function delay</li><li>all 0 ease 0 -&gt; 초기값</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;상속&quot;&gt;&lt;a href=&quot;#상속&quot; class=&quot;headerlink&quot; title=&quot;상속&quot;&gt;&lt;/a&gt;상속&lt;/h2&gt;&lt;p&gt;상속이란 상위 요소에 적용된 속성을 하위 요소가 물려받는 것을 의미한다&lt;br&gt;상속 기능이 없다면 각 요소의 rule set에 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Css-BoxModel</title>
    <link href="https://lsc900427.github.io/2017/08/07/Css-BoxModel/"/>
    <id>https://lsc900427.github.io/2017/08/07/Css-BoxModel/</id>
    <published>2017-08-06T19:57:24.000Z</published>
    <updated>2017-08-06T19:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>브라우저는 박스모델의 크기와 프로퍼티 위치를 근거로 하여 렌더링을 실행한다.</p><ul><li>Contents : 요소의 텍스트나 이미지등의 실제 내용이 위치하는 영역</li><li>Padding :  보더 안쪽에 위치하는 요소의 내부 여백 영역 요소에 적용된 배경색 이미지는 패딩영역까지 적용된다.</li><li>Border : 테두리 영역으로 보퍼 속성 값은 테두리의 두께를 의미한다.</li><li>Margin : 테두리 바깥에 위치하는 요소의 외부 여백 영역이다.</li></ul><p>컨텐츠가 width, height 값보다 크면 넘칠 수 있다<br>넘치는 컨텐츠는 overflow:hidden을 통해서 감출 수 있다.</p><h2 id="block-레벨-요소"><a href="#block-레벨-요소" class="headerlink" title="block 레벨 요소"></a>block 레벨 요소</h2><ul><li>항상 새로운 라인에서 시작한다.</li><li>화면 크기 전체의 가로폭을 차지한다.</li><li>width, height, amrgin, padding 프로퍼티 지정이 가능하다.</li><li>block 레벨 요소 내에 inline 레벨 요소를 포함 할 수 있다.</li><li>block 레벨 요소의 예 form, table</li></ul><h2 id="inline-레벨-요소"><a href="#inline-레벨-요소" class="headerlink" title="inline 레벨 요소"></a>inline 레벨 요소</h2><ul><li>새로운 라인에서 시작하지 않으면 문장의 중간에 들어갈 수 있다. 즉 줄을 바꾸지 않고 다른 요소와 함께 한 행에 위치한다</li><li>content의 너비만큼 가로 폭을 차지한다</li><li>width, height, amrgin, padding 프로퍼티 지정이 불가능하다 상 하 여백은 line-height로 지정한다.</li><li>inline 레벨 요소 뒤에 공백이 있는 경우 정의하지 않은 space가 자동 지정된다.</li><li>inline 레벨 요소 내에 block 레벨요소를 포함할 수 없다 inline레벨 요소는 일반적으로 block 레벨 요소에 포함되어 사용된다.</li><li>textarea, button, select, img</li></ul><h2 id="inline-block-레벨-요소"><a href="#inline-block-레벨-요소" class="headerlink" title="inline-block 레벨 요소"></a>inline-block 레벨 요소</h2><ul><li>block과 inline 레벨 요소의 특징을 모두 갖는다. inline레벨 요소와 같이 한 줄에 표현되면서 width, height, margin 프로퍼티를 모두 지정 할 수 있다.</li><li>기본적으로 인라인 레벨 요소와 흡사하게 줄을 바꾸지 않고 다른 요소와 함께 한 행에 위치시킬 수 있따.</li><li>블락 처럼 가로, 세로, 마진 패딩 프로퍼티를 모두 정의하고 상하여백도 마진과 라이하이트 두가지 모두로 제어가능하다</li></ul><h2 id="visibility-프로퍼티"><a href="#visibility-프로퍼티" class="headerlink" title="visibility 프로퍼티"></a>visibility 프로퍼티</h2><p>요소를 보이게 할 것인지 보이지 않게 할 것이지 정의한다<br>즉 요소의 렌더링 여부를 결정한다</p><p>visible    해당 요소를 보이게 한다 (기본값)<br>hidden    해당 요소를 보이지 않게 한다. display: none;은 해당 요소의 공간까지 사라지게 하지만 visibility: hidden;은 해당 요소의 공간은 사라지지 않고 남아있게 된다.<br>collapse    table 요소에 사용하며 행이나 열을 보이지 않게 한다.<br>none    table 요소의 row나 column을 보이지 않게 한다. IE, 파이어폭스에서만 동작하며 크롬에서는 hidden과 동일하게 동작한다.</p><h2 id="position"><a href="#position" class="headerlink" title="position"></a>position</h2><ul><li>static</li></ul><p>기본 값으로 기본적으로 position 프로퍼티를 지정하지 않을 때와 같다.<br>부모 요소 내에 자식 요소로서 존재할 때는 부모 요소의 위치를 기준으로 배치된다.<br>기본적으로 이 값을 지정할 일은 없지만 이미 설정된 position을 무력화 시키기위해서 사용된다.</p><ul><li>relative</li></ul><p>기본 위치를 기준으로 좌표를 사용하여 위치를 이동시킨다<br>static을 선언한 요소와 relative를 선언한 요소와의 차이는 좌표 프로퍼티의 동작여부뿐</p><ul><li>absolute</li></ul><p>부모 요소 혹은 가장 가까이 있는 조상요소 기준으로 좌표 프로퍼티 만큼 이동한다<br>즉 static을 제외한 나머지 속성이 선언되어 있는 부모 또는 조상 요소를 기준으로 위치가 결정된다</p><p>static 일경우는 document body를 기준으로 하여 좌표 속성대로 위치하게된다.<br>부모를 배치기준으로 삼고 싶다면 부모 요소에 relative를 정의해라<br>absolute선언시 블락레벨 요소의 width는 인라인 요소처럼 content에 맞게 변화되므로<br>적절한 width를 지정해야한다.</p><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><p>float 속성은 해당요소를 다음 요소위에 떠있게한다. 플롯의 의미는 요소가 기본 레이아웃의 흐름에서 벗어나<br>요소의 모서리가 페이지의 왼쪽이나 오른쪽으로 이동하는 것을 뜻한다.<br>플롯 사용시 요소의 위치를 고정시키는 포지션 속성의 absolute를 사용하면 안된다.</p><p>플롯시 높이로 인한 문제 해결법<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;브라우저는 박스모델의 크기와 프로퍼티 위치를 근거로 하여 렌더링을 실행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contents : 요소의 텍스트나 이미지등의 실제 내용이 위치하는 영역&lt;/li&gt;
&lt;li&gt;Padding :  보더 안쪽에 위치하는 요소의 내부 여
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html5-list,table</title>
    <link href="https://lsc900427.github.io/2017/08/07/Html5-list-table/"/>
    <id>https://lsc900427.github.io/2017/08/07/Html5-list-table/</id>
    <published>2017-08-06T18:06:16.000Z</published>
    <updated>2017-08-06T18:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="목록"><a href="#목록" class="headerlink" title="목록"></a>목록</h1><h2 id="순서없는-목록-순서-있는-목록"><a href="#순서없는-목록-순서-있는-목록" class="headerlink" title="순서없는 목록, 순서 있는 목록"></a>순서없는 목록, 순서 있는 목록</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>순서없는 목록 (Unordered List)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>순서있는 목록 (Ordered List)<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>type 속성을 사용해서 순서를 나타내는 문자를 지정할 수 있다.</p><ul><li>“1”    숫자 (기본값)</li><li>“A”    대문자 알파벳</li><li>“a”    소문자 알파벳</li><li>“I”    대문자 로마숫자</li><li>“i”    소문자 로마숫자<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"I"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p>start 속성으로 리스트의 시작값을 지정할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure><p>reversed 속성은 리스트의 순서 값을 역으로 표현한다.</p><h2 id="중첩목록"><a href="#중첩목록" class="headerlink" title="중첩목록"></a>중첩목록</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>중첩 목록<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tea</div><div class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Black tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Green tea<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>목록 태그는 네비게이션 메뉴를 만들 때 자주 사용된다.</p><h1 id="테이블"><a href="#테이블" class="headerlink" title="테이블"></a>테이블</h1><p>표를 만들 때 사용하는 태그이다 과거에는 테이블 태그를 사용하여 레이아웃을 구성하기도 했으나<br>현대 웹에서는 주로 공간 분할 태그인 div 태그를 사용해 레이아웃을 구성한다</p><ul><li>table : 표를 감싸는 태그</li><li>tr : 표 내부의 행</li><li>th : 행 내부의 제목 셀</li><li>td : 행 내부의 일반 셀</li><li>colspan : 행을 합칠때</li><li>rowspan : 열을 합칠 때</li></ul><h1 id="이미지"><a href="#이미지" class="headerlink" title="이미지"></a>이미지</h1><ul><li>src : 이미지 파일 경로</li><li>alt : 이미지 파일이 없을 경우 표시되는 문장</li><li>width : 이미지의 너비 (CSS에서 지정하는 것이 일반적)</li><li>height : 이미지의 높이</li></ul><h1 id="미디어"><a href="#미디어" class="headerlink" title="미디어"></a>미디어</h1><h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>audio 태그는 HTML5에서 새롭게 추가된 태그다.</p><ul><li>src : 음악 파일경로</li><li>preload : 재생 전에 음악 파일을 모두 불러올 것인지 지정</li><li>autoplay: 음악 파일의 자동재생을 실행 할 것인지 지정</li><li>loop : 음악을 반복할 것인지</li><li>controls : 음악 재생도구를 표시할 것인지.</li></ul><p>source 태그를 사용해서 파일의 형식 차이 문제를 해결 할 수 있다.</p><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><ul><li>src : 동영상 파일경로</li><li>poster : 동영상 준비중에 표시될 이미지 파일 경로</li><li>preload : 재생전 동영상 파일 모두 불러올 것인autoplay    동영상 파일을 자동의 재생 개시할 것인지 지정</li><li>loop 동영상을 반복할 것인지 지정</li><li>controls    동영상 재생 도구를 표시할 것인지 지정. 재생 도구의 외관은 브라우저마다 차이가 있다.</li><li>width    동영상의 너비를 지정</li><li>height    동영상의 높이를 지정</li></ul><h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p>폼태그는 사용자가 입력한 데이터를 수집하기 위해 사용되며 input, textarea, button, select, checkbox, radio button, submit button 등의 입력 양식 태그를 포함 할 수 있다.</p><ul><li>action : URL을 값으로 입력 받음, 입력데이터가 전송될 URL을 지정</li><li>method : get / post, 입력데이터의 전달 방식을 지정</li></ul><p>GET, POST는 HTTP 프로토콜을 이용해서 서버에 입력 데이터를 전달하는 방식이다.</p><p>GET</p><ul><li>GET 방식은 전송 URL에 입력 데이터를 쿼리 스트링으로 보내는 방식</li><li><a href="http://jsonplaceholder.typicode.com/posts?userId=1&amp;id=1" rel="external nofollow noopener noreferrer" target="_blank">http://jsonplaceholder.typicode.com/posts?userId=1&amp;id=1</a></li><li>전송 URL 바로 뒤에 ?를 통해 데이터의 시작을 알려주고, key-value형태의 데이터를 추가한다. 1개 이상의 전송 데이터는 ‘&amp;’로 구분</li><li>URL에 전송 데이터가 모두 노출되기 때문에 보안에 문제가 있으며 전송할 수 있는 데이터의 한계가 있다.(255자)</li></ul><p>POST</p><ul><li>POST 방식은 Request Body에 담아 보내는 방식이다.</li><li><a href="http://jsonplaceholder.typicode.com/posts" rel="external nofollow noopener noreferrer" target="_blank">http://jsonplaceholder.typicode.com/posts</a></li><li>URL에 전송 데이터가 모두 노출되지 않지만 GET에 비해 속도가 느리다.</li></ul><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>input태그는 폼태그 중에서 가장 중요한 태그로 사용자로부터 데이터를 입력받기 위해 사용된다.<br>서버에 전송되는 데이터는 name 어트리뷰트를 키로 value 어트리뷰트를 값으로 하여 key = value의 형태로 전송된다.</p><ul><li>button : button create</li><li>check box : checkbox create</li><li>color : color select create</li><li>date : date control create</li><li>datetime : date &amp; time control create</li><li>email : email input form create.</li><li>file : file select form create</li><li>hidden : hidden input form create</li><li>image : image submit button create</li><li>month : month select form create</li><li>number : number input form create</li><li>password : password input form create</li><li>radio : radio button create</li><li>range : rage select form create</li><li>reset : reset button create</li><li>search : search input form create</li><li>submit : submit button create</li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>복수개의 리스트에서 복수개의 아이템을 선택할때 사용한다<br>서버에 전송되는 데이터는 select 요소의 name 어트리뷰트를 키로<br>option 요소의 value 어트리뷰트를 값으로 하여 key = value의 형태로 전송한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;목록&quot;&gt;&lt;a href=&quot;#목록&quot; class=&quot;headerlink&quot; title=&quot;목록&quot;&gt;&lt;/a&gt;목록&lt;/h1&gt;&lt;h2 id=&quot;순서없는-목록-순서-있는-목록&quot;&gt;&lt;a href=&quot;#순서없는-목록-순서-있는-목록&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html5-link</title>
    <link href="https://lsc900427.github.io/2017/08/07/Html5-link/"/>
    <id>https://lsc900427.github.io/2017/08/07/Html5-link/</id>
    <published>2017-08-06T17:27:56.000Z</published>
    <updated>2017-08-06T17:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><p>HtperText의 Hyper는 컴퓨터 용어로써 텍스트 등의 정보가 동일 선상에 있는 것이 아니라<br>다중으로 연결되어 있는 상태를 의미한다.</p><p>이것은 HTML의 가장 중요한 특징인 link의 개념과 연결되는데 기존 문서나 텍스트의 선형성 고정성의 제약에서 벗어나<br>사용자가 원하는 순서대로 원하는 정보를 취득할 수 있는 기능을 제공한다.<br>한 텍스트에서 다른 텍스트로 건너뛰어 읽을 수 있는 이 기능을 하이퍼링크라고 한다.<br>HTML link는 hyperlink를 의미하며 atag가 그 역할을 담당한다.</p><h2 id="href-어트리뷰트"><a href="#href-어트리뷰트" class="headerlink" title="href 어트리뷰트"></a>href 어트리뷰트</h2><p>href 어트리뷰트는 이동하고자 하는 파일의 위치(경로)를 값으로 받는다.<br>경로(path)란 파일 시스템 상에서 특정 파일의 위치를 의미한다.</p><h3 id="디렉토리"><a href="#디렉토리" class="headerlink" title="디렉토리"></a>디렉토리</h3><p>디렉토리는 파일과 다른 디렉토리를 갖는 파일 시스템 내의 존재물로써 폴더라고 불리운다</p><ul><li>루트 디렉토리</li></ul><p>파일 시스템 계층 구조 상의 최상위 디렉토리</p><ul><li>유닉스 : /</li><li>윈도우 : C:\</li></ul><ul><li>홈디렉토리</li></ul><p>시스템의 사용자에게 각각 할당된 개별 디렉토리</p><ul><li>유닉스: /users/계정명</li><li>윈도우: C:\users\계정명</li></ul><ul><li>작업 디렉토리</li></ul><p>현재 작업 중인 파일의 위치한 디렉토리이다.</p><ul><li>./</li></ul><ul><li>부모 디렉토리</li></ul><p>작업 디렉토리의 부모 디렉토리이다.</p><ul><li>../</li></ul><h2 id="파일-경로-File-path"><a href="#파일-경로-File-path" class="headerlink" title="파일 경로(File path)"></a>파일 경로(File path)</h2><p>파일경로는 파일 시스템에서 파일의 위치를 나타내는 방법이다. 경로에는 절대경로와 상대경로가 있다.</p><ul><li>절대경로</li></ul><p>현재 작업디렉토리와 관련없이 특정 파일의 절대적인 위치를 가리킨다 루트 디렉토리를 기준으로 파일의 위치를 나타낸다.</p><ul><li><a href="http://www.mysite.com/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.mysite.com/index.html</a></li><li>/Users/leeungmo/Desktop/myImage.jpg</li><li>C:\users\leeungmo\Desktop\myImage.jpg</li><li>/index.html</li></ul><ul><li>상대경로</li></ul><p>현재 작업디렉토리를 기준으로 특정파일의 상대적인 위치를 가리킨다.</p><ul><li>./index.html</li><li>../dist/index.js</li><li>../../dist/index.js</li><li>index.html</li><li>html/index.html</li></ul><p>href 어트리뷰트에 사용 가능한 값은 아래와 같다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com"</span>&gt;</span>URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"html/my.html"</span>&gt;</span>Local file<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"file/my.pdf"</span> <span class="attr">download</span>&gt;</span>Download file<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>fragment identifier<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:someone@example.com?Subject=Hello again"</span>&gt;</span>Send Mail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('Hello');"</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="target-어트리뷰트"><a href="#target-어트리뷰트" class="headerlink" title="target 어트리뷰트"></a>target 어트리뷰트</h2><p>타겟 속성은 링크를 클릭했을 때 윈도우를 어떻게 오픈할 지를 지정한다.</p><p>_self : 링크를 클릭시 연결문서를 현재 윈도우에서 오픈 (기본값)<br>_blank : 링크를 클릭 시 연결문서를 새로운 윈도우나 탭에서 오픈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h3&gt;&lt;p&gt;HtperText의 Hyper는 컴퓨터 용어로써 텍스트 등의 정보가 동일 선상에 있는 것이 아니라&lt;br&gt;다중으로 연결되어 있는
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html5-tag</title>
    <link href="https://lsc900427.github.io/2017/08/07/Html5-tag/"/>
    <id>https://lsc900427.github.io/2017/08/07/Html5-tag/</id>
    <published>2017-08-06T17:05:16.000Z</published>
    <updated>2017-08-06T17:05:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>문서 형식 정의(Document Type Definition, DTD)태그는 출력할 웹페이지의 형식을 브라우저에게 전달한다.<br>문서의 최상위에 위치해야하며 대소문자를 구별하지 않는다.</p><p>HTML5<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure></p><p>HTML 4.01<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></div></pre></td></tr></table></figure></p><p>XHTML 1.0<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></div></pre></td></tr></table></figure></p><h3 id="html-tag"><a href="#html-tag" class="headerlink" title="html tag"></a>html tag</h3><p>html 태그는 모든 HTML 요소의 부모 요소이며 웹페이지에 단 하나만 존재한다.<br>즉 모든 요소는 html 요소의 자식 요소이며 html 요소 내부에 기술해야한다 단<br>DTD는 예외이다.</p><p>html은 글로볼 어트리뷰트를 지원한다. 특히 lang 어트리뷰트를 사용하는 경우가 많다.<br>다음은 한국어를 주언어로 사용하는 경우의 예이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"ko"</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="head-tag"><a href="#head-tag" class="headerlink" title="head tag"></a>head tag</h3><p>head요소는 메타데이터를 포함하기 위한 요소이며 웹페이지에 단 하나만 존재한다<br>메타데이터는 HTML 문서의 title, style, link, script에 대한 데이터로 화면에 표시되지 않는다.<br>head요소에는 메타데이터 이외의 화면에 표시되는 일체의 요소를 포함시킬 수 없다.</p><h3 id="title-tag"><a href="#title-tag" class="headerlink" title="title tag"></a>title tag</h3><p>title요소는 문서의 제목을 정의한다 정의된 제목은 브라우저의 탭에 표시된다.</p><h3 id="link-tag"><a href="#link-tag" class="headerlink" title="link tag"></a>link tag</h3><p>link요소에는 외부 리소스와의 연계 정보를 정의한다 주로 HTML과 외부 CSS 파일을 연계에 사용된다.</p><h3 id="meta-tag"><a href="#meta-tag" class="headerlink" title="meta tag"></a>meta tag</h3><p>meta 요소는  description, keywords, author, 기타 메타데이터 정의에 사용된다.<br>메타데이터는 브라우저 검색엔진(keywords) 등에 의해 사용된다.<br>charset 어트리뷰트는 브라우저가 사용할 문자셋을 정의한다.</p><p> description =&gt; 웹페이지의 설명을 정의한다</p><p> keywords=&gt; 검색엔진이 사용할 keywords를 정의한다.</p><p> author=&gt; 저자를 명기한다.</p><p><meta http-equiv="refresh" content="30"> 웹페이지를 30초마다 다시시작한다.</p><h3 id="body-tag"><a href="#body-tag" class="headerlink" title="body tag"></a>body tag</h3><p>body tag는 HTML 문서의 내용을 나타내며 웹페이지에 단 하나만 존재한다. 메타데이터를 제외한 웹페이지를 구성하는 대부분의 요소가 body 요소 내에 기술된다.</p><h1 id="Text-관련-태그"><a href="#Text-관련-태그" class="headerlink" title="Text 관련 태그"></a>Text 관련 태그</h1><h3 id="제목-Headings-태그"><a href="#제목-Headings-태그" class="headerlink" title="제목 (Headings) 태그"></a>제목 (Headings) 태그</h3><p>heading 태그는 제목을 나타낼 때 사용하며 h1에서 h6까지의 태그가 있다 h1이 가장 중요한 제목을 의미하며 글자의 크기도 가장 크다<br>시맨팅ㄱ 웹의 의미를 살려서 제목 이외에는 사용하지 않는 것이 좋다 검색엔진은 제목 태그를 중요한 의미로 받아들일 가능성이 크다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="글자형태의-태그"><a href="#글자형태의-태그" class="headerlink" title="글자형태의 태그"></a>글자형태의 태그</h3><h1 id="b-tag"><a href="#b-tag" class="headerlink" title="b tag"></a>b tag</h1><p>bold체를 지정한다 시맨틱 의미는 없다.</p><h1 id="i-tag"><a href="#i-tag" class="headerlink" title="i tag"></a>i tag</h1><p>italic체를 지정한다. 의미론적 의미는 없다.</p><h1 id="em-tag"><a href="#em-tag" class="headerlink" title="em tag"></a>em tag</h1><p>emphasized(강조 중요한) text를 지정한다. i tag와 동일하게 italic체로 표현된다 의미론적 중요성의 의미를 갖는다.</p><h1 id="small-tag"><a href="#small-tag" class="headerlink" title="small tag"></a>small tag</h1><p>small text를 지정한다.</p><h1 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h1><p>highlighted text를 지정한다.</p><h1 id="del"><a href="#del" class="headerlink" title="del"></a>del</h1><p>deleted(removed) text를 지정한다. (가운데 줄)</p><h1 id="ins"><a href="#ins" class="headerlink" title="ins"></a>ins</h1><p>inserted(added)text를 지정한다. (밑줄)</p><h1 id="sup-suq-tag"><a href="#sup-suq-tag" class="headerlink" title="sup / suq tag"></a>sup / suq tag</h1><p>sub태그는 아래에 쓰인 text sup 태그는 위에 쓰인 text를 지정한다.</p><h3 id="본문태그"><a href="#본문태그" class="headerlink" title="본문태그"></a>본문태그</h3><h3 id="p-tag"><a href="#p-tag" class="headerlink" title="p tag"></a>p tag</h3><p>단락을 지정한다</p><h3 id="br-tag"><a href="#br-tag" class="headerlink" title="br tag"></a>br tag</h3><p>br은 강제 개행을 지정한다 br tag는 빈요소로 종료 태그가 없다</p><h3 id="공백-표시법"><a href="#공백-표시법" class="headerlink" title="공백 표시법"></a>공백 표시법</h3><p>HTML에서는 1개이상의 공백(space)을 삽입하여 1개의 공백으로 표시된다 1개이상의 연속된 줄바꿈(enter)도 1개의 공백으로 표시된다</p><p>연속적 공백을 표시하는 방법은 <code>&amp;nbsp;</code>의 사용</p><h3 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h3><p>형식화된 text를 지정한다 pre태그 내의 content는 작성된 그대로 브라우저에 표시된다.</p><h3 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h3><p>수평줄을 삽입한다.</p><h3 id="q"><a href="#q" class="headerlink" title="q"></a>q</h3><p>짧은 인용문을 지정한다 브라우저는 인용부호(큰 따옴표)로 q요소를 감싼다.</p><h3 id="blockquote"><a href="#blockquote" class="headerlink" title="blockquote"></a>blockquote</h3><p>긴 인용문 블럭을 지정한다. 브라우저는 blockquote 요소를 들여쓰기한다 css를 이용하여 다양한 style을 적용할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;문서 형식 정의(Document Type Definition, DTD)태그는 출력할 웹페이지의 형식을 브라우저에게 전달한다.&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html5-sematicWeb</title>
    <link href="https://lsc900427.github.io/2017/08/07/Html5-sematicWeb/"/>
    <id>https://lsc900427.github.io/2017/08/07/Html5-sematicWeb/</id>
    <published>2017-08-06T16:11:41.000Z</published>
    <updated>2017-08-06T16:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>검색 엔진이라는 것은 매우 중요하다. 웹사이트가 검색엔진에 노출이 되지 않는다면<br>접속자도 없어지기 때문이다.<br>SEO같은 마케팅 도구를 사용하여 본인의 웹사이트를 검색하기 알맞은 구조로<br>웹사이트를 조정하기도 하는데 이는 기본적으로 검색엔진이 웹사이트 정보를 어떻게 수집하는지<br>아는 것으로 부터 시작된다.<br>검색엔진은 로봇이라는 프로그램을 이용해서 매일 전세계의 웹사이트 정보를 수집한다<br>이것을 크롤링이라하면 검색엔진의 크롤러가 이를 수행한다. 그리고 검색 사이트 이용자가<br>검색할 만한 키워드를 미리 예상하여 검색 키워드에 대응하는 인덱스(색인)을 만들어 둔다.<br>(이것을 인덱싱이라 하며 검색엔진의 인덱서가 이를 수행한다.)<br>인덱스를 생성할 때 사용되는 정보는 검색 로봇이 수집한 정보인데 결국 웹사이트의 HTML 코드이다<br>즉 검색엔진은 HTML 코드만으로 그 의미를 인지하여야 하는데 이 때 시맨틱 요소를 해석하게 된다.<br>HTML로 작성된 문서는 컴퓨터가 해석할 수 있는 메타데이터와 사람이 사용하는 자연어 문장이 뒤섞여 있다.<br>아래 코드를 보면 1행 2행은 브라우저에서 동일한 외형을 갖는다. 이는 h1 태그의 디폴트 스타일이 1행과 같기 때문이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> =<span class="string">"6"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure><p>즉 1행의 요소는 의미론 적으로 어떤 의미도 없다. 개발자가 의도한 요소의 의미를 명확히 나타내지 않았고<br>단순히 폰트크기와 볼드체를 지정하는 메타데이터만을 브라우저에게 알리고 있다.<br>그러나 2행은 h1이라는 제목중 가장 상위 레벨이라는 의미를 내포하고 있어서 개발자가 의도한<br>요소의 의미가 명확히 드러나고 있다 이것은 코드의 가독성을 높이고 유지보수를 쉽게한다.</p><p>즉 시맨틱 태그란 브라우저 검색엔진 개발자 모두에게 콘텐츠의 의미를 명확히 설명하는 역할을 한다.</p><p>시맨틱 태그에 의해 컴퓨터가 HTML요소의 의미를 보다 명확히 해석하고 그 데이터를 활욜ㅇ할 수 있는 시멘틱 웹이 실현될 수 있다</p><p>시멘틱 웹이란 웹에 존재하는 수많은 웹페이지들에 메타데이터를 부여하여 기존의 잡다한 데이터 집합이었던 웹페이지를 ‘의미’와 ‘관련성’을<br>가지는 거대한 데이터베이스롤 구축하고자 하는 발상이다.</p><p>header는 헤더를의미<br>nav는 네비게이션을 의미<br>aside는 사이드에 위치하는 공간을 의미<br>section은 본문의 여러내용을 포함하는 공간을 의미<br>article은 본문의 주내용이 들어가는 공간을 의미<br>footer는 footer를 의미한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;검색 엔진이라는 것은 매우 중요하다. 웹사이트가 검색엔진에 노출이 되지 않는다면&lt;br&gt;접속자도 없어지기 때문이다.&lt;br&gt;SEO
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Html5</title>
    <link href="https://lsc900427.github.io/2017/08/06/Html5/"/>
    <id>https://lsc900427.github.io/2017/08/06/Html5/</id>
    <published>2017-08-06T13:02:06.000Z</published>
    <updated>2017-08-06T13:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML, CSS는 기본이지만 자꾸 그 기본에 대한 불안감이 커져서 총정리 하는 시간을 가져보도록 하려한다.</p><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>HTML(HyperText Markup Language)는 웹페이지를 기술하기 위한 마크업 언어다.<br>즉 웹페이지의 내용(content)와 구조(structure)를 담당하는 언어로써 HTML 태그를 통해서<br>정보를 구조화하는 것이다.</p><p>HTML은 그래픽, 통신, 디바이스 접근, 오프라인, 시맨틱 태그, CSS3를 완벽히 지원한다.</p><p>HTML5문서는 반드시 <code>&lt;!DOCTYPE html&gt;</code>이라는 문서형식을 HTML5로 지정한다.<br>실제 HTML문서는 <code>&lt;html&gt;</code>과 <code>&lt;/html&gt;</code> 사이에 작성한다.<br><code>&lt;head&gt;</code>와 <code>&lt;/head&gt;</code> 사이에는 document title, 외부파일의 참조, metadata의 설정등이 위치하고<br>이 정보는 브라우저에 표시되지 않는다.<br>웹브라우저에 출력되는 모든 요소들은 <code>&lt;body&gt;</code>태그 안에 위치한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>HTML document는 .html 확장자를 가지는 순수한 테긋트 파일이다. 그러므로 메모장 등으로도 편집가능하다.</p><h2 id="기본문법"><a href="#기본문법" class="headerlink" title="기본문법"></a>기본문법</h2><p>태그는 대소문자를 구별하지 않으나 소문자를 사용하는 것이 일반적이다.</p><p>요소는 중첩될 수 있다. 즉, 요소는 다른 요소를 포함할 수 있는데 이때 부자관계가 성립된다.<br>이런 부자관계로 정보를 구조화 하는 것이다.</p><p>이런 중첩된 관계를 시각적으로 파악하기 쉽게 인덴트를 사용한다.</p><p>텍스트노드를 가질 수 없는 요소를 빈요소라하는데 빈요소들은 어트리뷰트노드만을 가질 수 있다.<br><em>br</em>hr<br><em>img</em>input<br><em>link</em>meta</p><h2 id="어트리뷰트"><a href="#어트리뷰트" class="headerlink" title="어트리뷰트"></a>어트리뷰트</h2><p>어트리뷰트란 요소의 성질, 특징을 정의하는 명세다. 요소는 어트리뷰트를 가질 수 있으며 어트리뷰트는<br>요소에 추가적인 정보(이미지 파일의 경로, 크기)를 제공한다. 어트리뷰트는 시작태그에 위치해야하고<br>이름과 값의 쌍을 이룬다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"hihi.jpg"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>이런 정보를 사용해서 브라우저는 img 요소들을 화면에 출력한다.</p><h3 id="공용-어트리뷰트"><a href="#공용-어트리뷰트" class="headerlink" title="공용 어트리뷰트"></a>공용 어트리뷰트</h3><p>공용 어트리뷰트는 모든 요소가 사용할 수 있는 어트리뷰트다.<br>id -&gt; 유일한 식별자를 요소에 지정, 중복지정 불가능<br>class -&gt; 스타일시트에 정의된 class를 요소에 지정 중복지정 가능<br>hidden -&gt; css hidden과 다르게 의미상으로도 브라우저에 노출되지 않게한다.<br>lang -&gt; 지정된 요소의 언어를 지정, 검색엔진의 크롤링시 웹페이지의 언어를 인식할 수 있게 한다.<br>sytle -&gt; 요소에 인라인 스타일을 지정한다.<br>tabindex -&gt; 사용자가 키보드로 페이지를 내비게이션 시 이동 순서를 정한다.<br>title -&gt; 요소에 관한 제목을 지정한다.</p><h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><p>주석은 개발자에게 코드를 설명하기 위해서 사용되며 브라우저는 주석을 화면에 표시하지 않는다.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 이 안에 있는 내용은 브라우저에서 안보인다. --&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML, CSS는 기본이지만 자꾸 그 기본에 대한 불안감이 커져서 총정리 하는 시간을 가져보도록 하려한다.&lt;/p&gt;
&lt;h2 id=&quot;정의&quot;&gt;&lt;a href=&quot;#정의&quot; class=&quot;headerlink&quot; title=&quot;정의&quot;&gt;&lt;/a&gt;정의&lt;/h2&gt;&lt;p&gt;HT
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="https://lsc900427.github.io/2017/08/06/Webpack/"/>
    <id>https://lsc900427.github.io/2017/08/06/Webpack/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">Webpack</a>는 자바스크립트를 위한 모듈 번들러입니다.<br><img src="../../../../images/webpack.png" alt="html"><br>많이 쓰이지만 처음 접하면 굉장히 복잡한 도구 중 하나라고 생각합니다.<br>이런 복잡함을 해소하기 위해서 보통 스타터킷으로 많이 시작하곤 하죠.<br>그렇기에 설정들이 무엇을 의미하는지 알기가 쉽지 않습니다.<br>우리는 간단하게 webpack의 설정들이 무엇인지 알아보는 시간을 갖도록 하겠습니다.!!</p><h2 id="Webpack-설정"><a href="#Webpack-설정" class="headerlink" title="Webpack 설정"></a>Webpack 설정</h2><h3 id="1단계"><a href="#1단계" class="headerlink" title="1단계"></a>1단계</h3><p><code>webpack.config.js</code>파일을 생성합니다.(폴더 생성하셔서 이런 이름의 파일을 만드시면 됩니다)</p><p><code>path</code>를 로드합니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div></pre></td></tr></table></figure><p><code>path</code>의 역할은 경로를 설정해주는 의존 모듈</p><h3 id="2단계"><a href="#2단계" class="headerlink" title="2단계"></a>2단계</h3><p><code>webpack</code> 설정 모듈을 정의합니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.export = &#123;</div><div class="line">    entry: <span class="string">'./test2.js'</span>,                 </div><div class="line">    output: &#123;                           </div><div class="line">      path: __dirname,                     </div><div class="line">      filename: <span class="string">'bundle.js'</span>,               </div><div class="line">      publicPath: <span class="string">'http://user-server-domain.com/'</span></div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>이제 <code>entry</code>와 <code>output</code>이 무엇인지 알아봅시다.</p><ul><li><code>entry</code>: 진입 파일의 경로를 설정</li><li><code>output</code>: 출력 파일의 경로를 설정<ul><li><code>path</code>: 출력 파일의 폴더를 설정 (절대 경로) / __dirname은 현재 자신의 경로입니다.</li><li><code>filename</code>: 출력 파일의 이름 설정</li><li><code>publicPath</code>: 배포시 HTML, CSS 파일 내부의 경로 업데이트를 하기 위한 설정<h5 id="publicPath-HTML-CSS-파일에-경로가-설정되어-있는데-로컬-테스트-환경에서는-로드할-수-있는-URL이-있을-수-있으나-배포시에는-적용이-안되어-일일이-수정해야하는-경우가-있는데그런경우에-사용합니다"><a href="#publicPath-HTML-CSS-파일에-경로가-설정되어-있는데-로컬-테스트-환경에서는-로드할-수-있는-URL이-있을-수-있으나-배포시에는-적용이-안되어-일일이-수정해야하는-경우가-있는데그런경우에-사용합니다" class="headerlink" title="publicPath: HTML, CSS 파일에 경로가 설정되어 있는데 로컬 테스트 환경에서는 로드할 수 있는 URL이 있을 수 있으나 배포시에는 적용이 안되어 일일이 수정해야하는 경우가 있는데그런경우에 사용합니다."></a><code>publicPath</code>: HTML, CSS 파일에 경로가 설정되어 있는데 로컬 테스트 환경에서는 로드할 수 있는 URL이 있을 수 있으나 배포시에는 적용이 안되어 일일이 수정해야하는 경우가 있는데그런경우에 사용합니다.</h5></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,                </div><div class="line">        exclude: [ <span class="regexp">/node_modules/</span> ],  <span class="comment">// 제외할 경로</span></div><div class="line">        include: [ <span class="regexp">/src/</span> ],           <span class="comment">// 포함할 경로</span></div><div class="line">        loader: <span class="string">'babel-loader'</span>        </div><div class="line">    &#125;]</div><div class="line">  &#125;,</div></pre></td></tr></table></figure><ul><li><code>module</code>: webpack의 모듈을 설정<ul><li><code>rules</code>: 다양한 모듈이 있기에 모듈별로 정의해주기 위한 설정<ul><li><code>test</code>: 파일 경로를 정규표현식으로 설정</li><li><code>excluee</code>: 제외할 경로(loader가 안 읽을 것들을 제외)</li><li><code>include</code>: 포함할 경로(loader가 읽을 것들을 포함)</li><li><code>loader</code>: 번들링에 사용되는 모듈을 설정 (css, js, image, babel등 다양한 타입)</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">devtool: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line">resolve: &#123;</div><div class="line">  extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">&#125;,</div></pre></td></tr></table></figure><ul><li><code>devtool</code>: 번들된 파일에서 오류검출이 아니라 각각의 파일에서 오류를 검출 설정가능(다양한 설정 존)</li><li><code>extensions</code>: 파일 확장자 설정</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">plugins: [],</div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    compress: <span class="literal">true</span>,</div><div class="line">    port: <span class="number">9000</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><code>plugins</code>: 결과물인 bundle에 작동하는 추가 node_modules</p><ul><li><code>dev-server</code>: 자신이 설정한 포트로 실행되는 개발 서버입니다.<br>서버는 내부적으로 webpack을 호출하며 실시간로딩 및 각종 추가적인 기능을 활용할 수 있습니.<ul><li><code>contentBase</code>: devServer의 루트 경로를 설정합니다.</li></ul></li></ul><h3 id="3단계"><a href="#3단계" class="headerlink" title="3단계"></a>3단계</h3><p>이제 웹팩 설정 파일을 보며 복습해 봅시다!<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: path.resolve(<span class="string">'src/index.jsx'</span>),</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(<span class="string">'dist'</span>),</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      loader: <span class="string">'eslint-loader'</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      enforce: <span class="string">'pre'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'babel-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.hbs$/</span>,</div><div class="line">      loader: <span class="string">'handlebars-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      loader: <span class="string">'style-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.css$/</span>,</div><div class="line">      loader: <span class="string">'css-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      test: <span class="regexp">/\.(png|jpg|gif|ttf|eot|woff|woff2|svg)$/</span>,</div><div class="line">      loader: <span class="string">'url-loader'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  devtool: <span class="string">'cheap-module-eval-source-map'</span>,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  plugins: [],</div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    compress: <span class="literal">true</span>,</div><div class="line">    port: <span class="number">9000</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Webpack&lt;/a&gt;는 자바스크립트를 위한 모듈 번들러입니다.&lt;br&gt;&lt;img 
      
    
    </summary>
    
    
      <category term="webpack" scheme="https://lsc900427.github.io/tags/webpack/"/>
    
      <category term="v2" scheme="https://lsc900427.github.io/tags/v2/"/>
    
      <category term="bundler" scheme="https://lsc900427.github.io/tags/bundler/"/>
    
  </entry>
  
  <entry>
    <title>Es6 let,const</title>
    <link href="https://lsc900427.github.io/2017/08/06/let-const/"/>
    <id>https://lsc900427.github.io/2017/08/06/let-const/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p><h2 id="ES5에서-변수-선언의-유일한-방법-gt-var-키워드"><a href="#ES5에서-변수-선언의-유일한-방법-gt-var-키워드" class="headerlink" title="ES5에서 변수 선언의 유일한 방법 =&gt; var 키워드"></a>ES5에서 변수 선언의 유일한 방법 =&gt; var 키워드</h2><p><code>var 키워드의 특징</code></p><p>Function-level scope</p><ul><li>전역 변수의 남용 문제</li><li>for문에서 사용한 변수의 전역 참조 문제<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">var</span> a = <span class="number">2</span>; </div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2</span></div></pre></td></tr></table></figure></li></ul><p>var 키워드 생략 가능</p><ul><li>의도하지 않은 변수의 전역화</li></ul><p>변수 호이스팅</p><ul><li>인터프리터가 변수를 읽기 전에 undefined값이 할당되는 문제 발생</li></ul><p>전역변수가 사용이 편리한 면이 있지만 scope가 넓어서 협업시 변수의 중복 문제 및 재할당문제가 발생 될 수 있다.<br>Es6는 이런 단점을 보완하기 위해서 let, const 키워드를 도입</p><h2 id="ES6에서의-변수-let"><a href="#ES6에서의-변수-let" class="headerlink" title="ES6에서의 변수 let"></a>ES6에서의 변수 let</h2><p><code>let의 특징</code></p><p>Block-level scope</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div><div class="line">&#123;</div><div class="line"> <span class="keyword">let</span> a = <span class="number">2</span>; </div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//1</span></div></pre></td></tr></table></figure><p>중복 선언 금지<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="number">8</span>; <span class="comment">// 가능</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</div><div class="line"><span class="keyword">let</span> b = <span class="number">12</span>; <span class="comment">// 오류발생</span></div></pre></td></tr></table></figure></p><p>호이스팅</p><ul><li>자바스크립트는 let, const 포함 모든 선언을 호이스팅한다. var와 let의 차이점은<br>선언문 전에 참조할 경우 undefined가 아닌 Error가 발생한다. TDZ(일시적 사각지대) 때문이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="number">1</span>; <span class="comment">//의미없</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferneceError</span></div><div class="line"><span class="keyword">let</span> bar;</div></pre></td></tr></table></figure><p>이 차이점은 어디서 올까?<br>var로 선언한다면 변수를 선언하고 선언한 변수를 메모리에 넣는<br>초기화 행위(이때 undefined)가 한번에 이뤄진다. 일단 초기화를 하고 변수를 읽는다고 보면 된다.<br>let은 변수가 선언은 되지만 메모리에 넣는 행위(초기화)가<br>변수를 읽는 시점에 이뤄지기 때문에 에러가 발생한다.<br>즉 ReferenceError가 발생하는 이유는 초기화(undefined 할당)가 되지 않고<br>변수만 선언한 시점에서 변수를 불러오기 때문에 에러가 뜨는 것이라고 볼 수 있다.<br>에러가 뜨는 변수등록부터 초기화 될 때까지를 TDZ라 부른다.</p><p>전역변수</p><ul><li>var는 단순하게 전역에 변수를 때려넣으면 전역 객체의 프로퍼티가 되지만<br>let같은 경우는 전역 변수로 사용해도 전역 객체의 프로퍼티가 아니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">consolelog(<span class="built_in">window</span>.a); <span class="comment">//1</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.b); <span class="comment">//undefined</span></div></pre></td></tr></table></figure><p><code>const키워드의 특징</code><br>const는 변하지 않는 값(상수)의 역할을 수행한다.<br>const를 객체의 선언에 사용하면 좋다.</p><p>선언과 초기화</p><ul><li>let은 초기화 이후 다른 값으로 재할당 가능하나 const는 초기화 이후 재할당이 불가능하다.</li><li>또한 선언만 할수 없다.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line">a = <span class="number">2</span>; <span class="comment">// Error</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> c; <span class="comment">//Error</span></div></pre></td></tr></table></figure></li></ul><p>의미있는 변수는 상수화하자(대문자)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &gt; <span class="number">1</span>) &#123;</div><div class="line">  </div><div class="line">&#125; <span class="comment">// 지양</span></div><div class="line"><span class="keyword">const</span> MIN_NUMBER = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (a &gt; MIN_NUMBER) &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>const는 객체타입에 사용하자<br>let은 primirive형 변수에 사용하자<br>ES6는 var를 사용하지말자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES5에서-변수-선언의-유일한-방법-gt-var-키워드&quot;&gt;&lt;a href=&quot;#ES5에서-변수-선언의-유일한-방법-gt-var-키워드&quot; c
      
    
    </summary>
    
    
      <category term="let" scheme="https://lsc900427.github.io/tags/let/"/>
    
      <category term="const" scheme="https://lsc900427.github.io/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>__proto__</title>
    <link href="https://lsc900427.github.io/2017/08/06/proto/"/>
    <id>https://lsc900427.github.io/2017/08/06/proto/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES5에서는-객체-리터럴을-상속하기-위해서-Object-create-란-함수를-사용했다"><a href="#ES5에서는-객체-리터럴을-상속하기-위해서-Object-create-란-함수를-사용했다" class="headerlink" title="ES5에서는 객체 리터럴을 상속하기 위해서 Object.create()란 함수를 사용했다."></a>ES5에서는 객체 리터럴을 상속하기 위해서 Object.create()란 함수를 사용했다.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = &#123;</div><div class="line">  name: <span class="string">'고급차'</span>,</div><div class="line">  <span class="keyword">do</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name +<span class="string">'삽니다.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> maserati = <span class="built_in">Object</span>.create(Car);</div><div class="line">maserati.name = <span class="string">'마세라티'</span>;</div><div class="line">Car.do();</div><div class="line">maserati.do();</div></pre></td></tr></table></figure><h2 id="ES6에서는-객체리터럴-내부에서-proto-프로퍼티-직접-설정-가능하다"><a href="#ES6에서는-객체리터럴-내부에서-proto-프로퍼티-직접-설정-가능하다" class="headerlink" title="ES6에서는 객체리터럴 내부에서 proto 프로퍼티 직접 설정 가능하다."></a>ES6에서는 객체리터럴 내부에서 proto 프로퍼티 직접 설정 가능하다.</h2><figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const Car = &#123;</div><div class="line">  name: &apos;고급차&apos;,</div><div class="line">  do() &#123;</div><div class="line">    console.log(this.name + &apos;삽니다&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const maserati = &#123;</div><div class="line">  name: &apos;마세라티&apos;,</div><div class="line">  __proto__: Car</div><div class="line">&#125;;</div><div class="line">Car.do();</div><div class="line">maserati.do();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES5에서는-객체-리터럴을-상속하기-위해서-Object-create-란-함수를-사용했다&quot;&gt;&lt;a href=&quot;#ES5에서는-객체-리터럴을-상속하기-위해서-Object-create-란-함수를-사용했다&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://lsc900427.github.io/tags/ES6/"/>
    
      <category term="__proto__" scheme="https://lsc900427.github.io/tags/proto/"/>
    
  </entry>
  
  <entry>
    <title>Rest parameter</title>
    <link href="https://lsc900427.github.io/2017/08/06/rest,%20spread/"/>
    <id>https://lsc900427.github.io/2017/08/06/rest, spread/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p><h2 id="기본-파라미터-초기값"><a href="#기본-파라미터-초기값" class="headerlink" title="기본 파라미터 초기값"></a>기본 파라미터 초기값</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">  x = x || <span class="number">0</span>;</div><div class="line">  y = y || <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a()); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(plus(<span class="number">1</span>,<span class="number">2</span>)); <span class="comment">//3</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x= <span class="number">0</span>, y=<span class="number">0</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a());</div><div class="line"><span class="built_in">console</span>.log(a(<span class="number">1</span>,<span class="number">2</span>));</div></pre></td></tr></table></figure><h2 id="Rest-Parameter"><a href="#Rest-Parameter" class="headerlink" title="Rest Parameter"></a>Rest Parameter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">...rest</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(rest));</div><div class="line"><span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div><div class="line">a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure><p>Rest 파라미터는 반드시 마지막 파라미터여야 한다.</p><h3 id="Spread-연산자"><a href="#Spread-연산자" class="headerlink" title="Spread 연산자"></a>Spread 연산자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function">(<span class="params">x, y, z</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">  <span class="built_in">console</span>.log(y);</div><div class="line">  <span class="built_in">console</span>.log(z);</div><div class="line">&#125;</div><div class="line">a(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div></pre></td></tr></table></figure><p>spread연산자는 인수에 rest는 파라미터에<br>spread 연산자는 순서 상관없이 사용가능하다.</p><h2 id="배열로-활용하는-법을-알아보자"><a href="#배열로-활용하는-법을-알아보자" class="headerlink" title="배열로 활용하는 법을 알아보자"></a>배열로 활용하는 법을 알아보자</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 기존 배열을 새로운 배열로 합칠경우</span></div><div class="line"><span class="comment">// ES5 </span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(arr.concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])); <span class="comment">// [1,2,3,4,5,6]</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log([...arr, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div><div class="line"></div><div class="line"><span class="comment">//push</span></div><div class="line"></div><div class="line"><span class="comment">//ES5</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.push.apply(arr1, arr2);</div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2, 3, 4]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">const</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line">arr1.push(...arr2); <span class="comment">// arr1.push(3, 4);</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[1, 2, 3, 4];</span></div><div class="line"></div><div class="line"><span class="comment">//copy</span></div><div class="line"></div><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> arr1copy = arr1.slice();</div><div class="line"></div><div class="line">arr1copy.push(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(arr1copy); <span class="comment">// [1, 2, 3];</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2];</span></div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">const</span> arr1copy = [...arr1];</div><div class="line"></div><div class="line">arr1copy.push(<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(arr1copy); <span class="comment">// [1, 2, 3];</span></div><div class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1, 2];</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;기본-파라미터-초기값&quot;&gt;&lt;a href=&quot;#기본-파라미터-초기값&quot; class=&quot;headerlink&quot; title=&quot;기본 파라미터 초기값&quot;&gt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://lsc900427.github.io/tags/ES6/"/>
    
      <category term="rest parameter" scheme="https://lsc900427.github.io/tags/rest-parameter/"/>
    
      <category term="spread" scheme="https://lsc900427.github.io/tags/spread/"/>
    
  </entry>
  
  <entry>
    <title>ES6-destructuring</title>
    <link href="https://lsc900427.github.io/2017/08/06/ES6-destructuring/"/>
    <id>https://lsc900427.github.io/2017/08/06/ES6-destructuring/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p><p>해체할당(destructuring)은 기존에 구조로 가지고 있던 객체(배열 또는 객체)를 분석하여 개별적인 변수에 할당하는 것<br>배열 또는 객체 리터럴에서 필요한 값만 추출하여 변수에 할당하거나 반환할때 유용</p><h2 id="배열-해체할당"><a href="#배열-해체할당" class="headerlink" title="배열 해체할당"></a>배열 해체할당</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> one = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> two = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(one, two)</div></pre></td></tr></table></figure><p>ES6에서 배열해체할당은 배열의 각 요소를 배열로부터 추출하여 변수 리스트에 할당한다.<br>이때 추출, 할당 기준은 인덱스이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//인덱스를 기준으로 배열로부터 요소를 추출하여 변수에 할당한다.</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">const</span> [hi, hello] = arr;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(hi, hello); <span class="comment">//1, 2</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> q, w, e;</div><div class="line"></div><div class="line">[q, w] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(q, w); <span class="comment">// 1, 2</span></div><div class="line"></div><div class="line">[q, w] = [<span class="number">1</span>]; <span class="comment">// 1, undefined</span></div><div class="line"></div><div class="line">[q, w, e = <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(q, w, e) <span class="comment">// 1, 2, 5</span></div><div class="line"></div><div class="line">[q, ...w] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(q, w) <span class="comment">// 1, [2,3,4,5]</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> [a, , b] = arr  <span class="comment">//1, 3 공백이 처리가 안되었다.</span></div></pre></td></tr></table></figure><h2 id="객체-해체할당"><a href="#객체-해체할당" class="headerlink" title="객체 해체할당"></a>객체 해체할당</h2><p>ES5의 경우 배열과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ob = &#123;<span class="attr">first</span>: <span class="string">'sang'</span>, <span class="attr">last</span>: <span class="string">'lee'</span>&#125;;</div><div class="line"><span class="keyword">var</span> name = &#123;&#125;;</div><div class="line"></div><div class="line">name.first = ob.first;</div><div class="line">name.last = ob.last;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name) <span class="comment">// &#123;first: 'sang', last: 'lee'&#125;</span></div></pre></td></tr></table></figure><p>배열의 해체할당 기준은 index 객체 해체할당의 기준은 key값이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ob = &#123;<span class="attr">first</span>: <span class="string">'s'</span>, <span class="attr">last</span>: <span class="string">'l'</span>&#125;;</div><div class="line"><span class="keyword">const</span> &#123;first, last&#125; = ob;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(first, last); <span class="comment">// s, l</span></div></pre></td></tr></table></figure><p>객체 해체할당을 위해서는 <code>=</code> 왼쪽에 객체형태의 변수가 필요하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;<span class="attr">prop1</span>: item1, <span class="attr">prop2</span>: item2&#125; = &#123;<span class="attr">prop1</span>: <span class="number">1</span>, <span class="attr">prop2</span>: <span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">prop1</span>: item1, <span class="attr">prop2</span>: item2&#125;); <span class="comment">// &#123;prop1: 1, prop2: 2&#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">padding</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> left = <span class="number">1</span>, right = <span class="number">2</span>, top = <span class="number">3</span>, bottom = <span class="number">4</span>;</div><div class="line">  <span class="keyword">return</span> &#123;left, right, top, bottom&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;left, bottom&#125; = padding();</div><div class="line"><span class="built_in">console</span>.log(left, bottom); <span class="comment">// 1, 4</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;p&gt;해체할당(destructuring)은 기존에 구조로 가지고 있던 객체(배열 또는 객체)를 분석하여 개별적인 변수에 할당하는 것&lt;br&gt;배열 또는 
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://lsc900427.github.io/tags/ES6/"/>
    
      <category term="desturcturing" scheme="https://lsc900427.github.io/tags/desturcturing/"/>
    
      <category term="해체할당" scheme="https://lsc900427.github.io/tags/%ED%95%B4%EC%B2%B4%ED%95%A0%EB%8B%B9/"/>
    
  </entry>
  
  <entry>
    <title>ES6 템플릿 리터럴</title>
    <link href="https://lsc900427.github.io/2017/08/06/template_literal/"/>
    <id>https://lsc900427.github.io/2017/08/06/template_literal/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"><br>ES6는 템플릿 리터럴이라 불리는 새로운 문자열 표기법을 도입했다.<br>공백을 표현하기 위해서는 이스케이프 시퀀스를 사용해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> strings =</div><div class="line"><span class="string">`&lt;li&gt;밥&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;li&gt;반찬&lt;/li&gt;</span></div><div class="line"><span class="string">&lt;li&gt;고기&lt;/li&gt;`</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(strings)</div></pre></td></tr></table></figure><p>문자열 삽입, 표현식에 새로운 방식을 도입했다.<br><code>${문자열}</code>, <code>${자바스크립트 표현}</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> first = <span class="string">'이'</span>;</div><div class="line"><span class="keyword">const</span> last = <span class="string">'지'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'정말'</span> + first + last);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`정말<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;last&#125;</span>`</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;first === <span class="string">'이'</span>&#125;</span>`</span>)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;br&gt;ES6는 템플릿 리터럴이라 불리는 새로운 문자열 표기법을 도입했다.&lt;br&gt;공백을 표현하기 위해서는 이스케이프 시퀀스를 사용해야한다.&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://lsc900427.github.io/tags/ES6/"/>
    
      <category term="ES2015" scheme="https://lsc900427.github.io/tags/ES2015/"/>
    
      <category term="template-literal" scheme="https://lsc900427.github.io/tags/template-literal/"/>
    
  </entry>
  
  <entry>
    <title>화살표 함수</title>
    <link href="https://lsc900427.github.io/2017/08/06/arrow_funtion/"/>
    <id>https://lsc900427.github.io/2017/08/06/arrow_funtion/</id>
    <published>2017-08-06T11:44:12.000Z</published>
    <updated>2017-08-06T11:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/es6.png" alt="html"></p><h1 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h1><hr><h2 id="화살표-함수의-호출"><a href="#화살표-함수의-호출" class="headerlink" title="화살표 함수의 호출"></a>화살표 함수의 호출</h2><p>화살표 함수는 익명함수로만 사용할 수 있다.<br>따라서 호출하기 위해서는 함수표현식을 사용한다.</p><p>콜백함수로도 사용할 수 있다.</p><h2 id="arguments와-rest파라미터"><a href="#arguments와-rest파라미터" class="headerlink" title="arguments와 rest파라미터"></a>arguments와 rest파라미터</h2><p>arguments 객체는 유사배열 객체이다<br>함수 객체의 arguments 프로퍼티는 객체를 값으로 가지며 함수 내부에서 지역변수처럼 사용된다.</p><p>Es6는 arguments 프로퍼티가 없기 때문에 rest파라미터를 활용하여 가변인자를 함수내부에 배열로 전달 할 수 있다.</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>function 키워드를 사용하여 생성한 일반 함수와 Arrow function과의 가장 큰 차이점은 this이다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Love</span>(<span class="params">she</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.she = she;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Love.prototype.nice = <span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> contents.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.she&#125;</span>는 <span class="subst">$&#123;x&#125;</span> 를 사랑합니다`</span></div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> Love(<span class="string">'그녀'</span>);</div><div class="line"><span class="built_in">console</span>.log(people.nice([<span class="string">'바람'</span>, <span class="string">'물'</span>]));</div></pre></td></tr></table></figure><p>여기서 this가 생성자 함수의 인스턴스로 기대하였겠지만<br>프로토타입의 처음으로 실행하는 경우의 함수만 인스턴스로 인식이 되고 두번째 부터는 전역함수로 this가 할당이 되기 때문에<br>예상되는 결과가 나오지 않게 된다. 그렇기 때문에 이를 해결하기 위해서<br>4가지 방법이 있다.<br>첫번째는 프로토압의 첫번째 함수에 var that = this; 를대입시켜<br>that.she를 만들어주는 방법이다.</p><p>두번째는 function(contents){return contents.map(), this}<br>이후 두번째 인자로 this를 잡아주는 방법이다ㅏ</p><ul><li>이는 map의 두번째 인자의 역할 때문이다.</li></ul><p>세번째는 bind(this)를 이용하는 것이다.</p><ul><li>bind 같은 경우는 첫번째 인자가 그 스코프에서의 변수기 때문에 bind(this)를 사용할 경우<br>생성자의 this가 인스턴스인 this로 들어가게 된다.</li></ul><p>call이 안되는 이유는 call은 호출을 해버리기에 값이 함수가 아니라는 에러가 뜨게 된다.<br>//call이나 apply로 할 수 있는 방법이 있을까?</p><p>네번째는 애로우 함수의 this이다</p><ul><li>애로우 함수의 this 언제나 자신이 포함된 외부 스코프에서 this를 계승 받는다 즉 this를 생성하지 않고 자신을 포함하는 컨텍스트로부터 this를<br>가져오기 때문에 생성자를 객체를 가져오게 된다.</li></ul><p>이로인해서 애로우 함수가 쓰이면 안되는 곳이 있다.</p><ol><li>메소드 안에 함수를사용하면 외부의 디스를 가져와서 전역 객체에 바인딩 된다.<br>축약형 표현을 사용해라 <code>yes() {}</code></li><li>prototype에 할당하는 경우도 동일한 문제가 발생한다.<br>왜냐면 프로토 타입에도 처음 익명함수는 그 객체이기 때문이다.</li><li>애로우함수에서 생성자함수는 아예 존재하지 않는다. 그러므로 애로우 함수는 생성자 함수로 사용 불가능하다. 프로토타입 프로퍼티가 존재하지 않기 때문이다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../../../images/es6.png&quot; alt=&quot;html&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Syntax&quot;&gt;&lt;a href=&quot;#Syntax&quot; class=&quot;headerlink&quot; title=&quot;Syntax&quot;&gt;&lt;/a&gt;Syntax&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="ES6" scheme="https://lsc900427.github.io/tags/ES6/"/>
    
      <category term="ES2015" scheme="https://lsc900427.github.io/tags/ES2015/"/>
    
      <category term="Arrow function" scheme="https://lsc900427.github.io/tags/Arrow-function/"/>
    
      <category term="this" scheme="https://lsc900427.github.io/tags/this/"/>
    
      <category term="scope" scheme="https://lsc900427.github.io/tags/scope/"/>
    
  </entry>
  
</feed>
